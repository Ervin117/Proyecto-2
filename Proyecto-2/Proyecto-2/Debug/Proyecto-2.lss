
Proyecto-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  00000c6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f0f  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a0  00000000  00000000  00001d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b02  00000000  00000000  000026c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  000031c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000549  00000000  00000000  00003414  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000395  00000000  00000000  0000395d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003cf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	af 30       	cpi	r26, 0x0F	; 15
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 47 02 	call	0x48e	; 0x48e <main>
  88:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <serialUART>:
 */ 
#include "UART_eeprom.h"

void serialUART()
{
		DDRD |= (1<< DDD1);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	82 60       	ori	r24, 0x02	; 2
  94:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1<<DDD0);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	8a b9       	out	0x0a, r24	; 10
		
		//configurado para enviar y recibir.
		UCSR0A |= (1<<U2X0);
  9c:	e0 ec       	ldi	r30, 0xC0	; 192
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
		UCSR0B |= (1<< RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 69       	ori	r24, 0x98	; 152
  ae:	80 83       	st	Z, r24
		UCSR0C |= (1<< UCSZ01) | (1<<UCSZ00);
  b0:	e2 ec       	ldi	r30, 0xC2	; 194
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 83       	st	Z, r24
		UBRR0 = 207; //valor calculado para los 9600
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c6:	08 95       	ret

000000c8 <setup>:

/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli();
  c8:	f8 94       	cli
	//CLKPR = (1<<CLKPCE);
	//CLKPR = (1<<CLKPS2);
	
	//Configuración de las salidas de los modos. 
	DDRD |= (1 << DDD2);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << PORTD2);
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	8b 7f       	andi	r24, 0xFB	; 251
  d4:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1 << DDD3);
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << PORTD3);
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	87 7f       	andi	r24, 0xF7	; 247
  e0:	8b b9       	out	0x0b, r24	; 11
	
	//Configuración de los botones. 
	DDRC &= ~((1<<DDC0) | (1<<DDC1));
  e2:	87 b1       	in	r24, 0x07	; 7
  e4:	8c 7f       	andi	r24, 0xFC	; 252
  e6:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0) | (1 << PORTC1);
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	88 b9       	out	0x08, r24	; 8
	PCICR |= (1<<PCIE1);
  ee:	e8 e6       	ldi	r30, 0x68	; 104
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT9) | (1 << PCINT8);
  f8:	ec e6       	ldi	r30, 0x6C	; 108
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	80 83       	st	Z, r24
	
	//Configuración de los servos. 
	Servo1(no_invt, 1024); 
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	74 e0       	ldi	r23, 0x04	; 4
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 42 03 	call	0x684	; 0x684 <Servo1>
	Servo2(no_invt, 8); 
 10c:	68 e0       	ldi	r22, 0x08	; 8
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 80 03 	call	0x700	; 0x700 <Servo2>
	Servo4(no_invt2, 1024); 
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	74 e0       	ldi	r23, 0x04	; 4
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <Servo4>
	Servo3(no_invt); 
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 df 03 	call	0x7be	; 0x7be <Servo3>
	
	UCSR0B = 0;
 126:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	sei();
 12a:	78 94       	sei
 12c:	08 95       	ret

0000012e <conf_ADC>:
}

void conf_ADC()
{
	ADMUX = 0;
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0) | (1 << MUX0) |  (1 << MUX1) | (1<<MUX2); //| (1<<ADLAR)
 134:	80 81       	ld	r24, Z
 136:	87 64       	ori	r24, 0x47	; 71
 138:	80 83       	st	Z, r24
	
	ADCSRA = 0;
 13a:	ea e7       	ldi	r30, 0x7A	; 122
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADPS1) | (1<<ADPS2) |  (1<<ADIE) | (1<<ADEN);
 140:	80 81       	ld	r24, Z
 142:	8e 68       	ori	r24, 0x8E	; 142
 144:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret

0000014e <UART_mod>:
	}
}

void UART_mod()
{
	ADCSRA &= ~(1<<ADIE);
 14e:	ea e7       	ldi	r30, 0x7A	; 122
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	87 7f       	andi	r24, 0xF7	; 247
 156:	80 83       	st	Z, r24
	PORTD |= (1<<PORTD2);
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<PORTD3); 
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	8b b9       	out	0x0b, r24	; 11
 164:	08 95       	ret

00000166 <writeEEPROM>:
	//meter los valores del la escritura de la EEPROM. 
}

void writeEEPROM(uint8_t dato, uint16_t direcc)
{
	while (EEAR &(1<<EEPE)); 
 166:	21 b5       	in	r18, 0x21	; 33
 168:	32 b5       	in	r19, 0x22	; 34
 16a:	21 fd       	sbrc	r18, 1
 16c:	fc cf       	rjmp	.-8      	; 0x166 <writeEEPROM>
	EEAR = direcc; 
 16e:	72 bd       	out	0x22, r23	; 34
 170:	61 bd       	out	0x21, r22	; 33
	EEDR = dato; 
 172:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); 
 174:	8f b3       	in	r24, 0x1f	; 31
 176:	84 60       	ori	r24, 0x04	; 4
 178:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1<<EEPE); 
 17a:	8f b3       	in	r24, 0x1f	; 31
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	8f bb       	out	0x1f, r24	; 31
 180:	08 95       	ret

00000182 <ADC_mod>:
	ADCSRA |= (1<<ADSC);
}

void ADC_mod()
{
	conf_ADC();	
 182:	0e 94 97 00 	call	0x12e	; 0x12e <conf_ADC>
	PORTD &= ~(1<<PORTD2);
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8b 7f       	andi	r24, 0xFB	; 251
 18a:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<PORTD3);
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	87 7f       	andi	r24, 0xF7	; 247
 190:	8b b9       	out	0x0b, r24	; 11
	
	//Solo se guarda si se presiona el botón. 
	if (act	== 1 && prom <= 5)
 192:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <act>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	09 f0       	breq	.+2      	; 0x19c <ADC_mod+0x1a>
 19a:	4a c0       	rjmp	.+148    	; 0x230 <ADC_mod+0xae>
 19c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <prom>
 1a0:	86 30       	cpi	r24, 0x06	; 6
 1a2:	08 f0       	brcs	.+2      	; 0x1a6 <ADC_mod+0x24>
 1a4:	45 c0       	rjmp	.+138    	; 0x230 <ADC_mod+0xae>
	{
		PORTD |= (1<<PORTD3);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<PORTD2);
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(duty, addres++);
 1b2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <addres>
 1b6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <addres+0x1>
 1ba:	cb 01       	movw	r24, r22
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <addres+0x1>
 1c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <addres>
 1c6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <duty>
 1ca:	0e 94 b3 00 	call	0x166	; 0x166 <writeEEPROM>
		writeEEPROM(duty0, addres++);
 1ce:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <addres>
 1d2:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <addres+0x1>
 1d6:	cb 01       	movw	r24, r22
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <addres+0x1>
 1de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <addres>
 1e2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <duty0>
 1e6:	0e 94 b3 00 	call	0x166	; 0x166 <writeEEPROM>
		writeEEPROM(duty1, addres++);
 1ea:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <addres>
 1ee:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <addres+0x1>
 1f2:	cb 01       	movw	r24, r22
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <addres+0x1>
 1fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <addres>
 1fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1>
 202:	0e 94 b3 00 	call	0x166	; 0x166 <writeEEPROM>
		writeEEPROM(duty2, addres++);
 206:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <addres>
 20a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <addres+0x1>
 20e:	cb 01       	movw	r24, r22
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <addres+0x1>
 216:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <addres>
 21a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <duty2>
 21e:	0e 94 b3 00 	call	0x166	; 0x166 <writeEEPROM>
		prom++;
 222:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <prom>
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <prom>
		act = 0; //setear el valor de los paquetes guardados
 22c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <act>
 230:	08 95       	ret

00000232 <readEEPROM>:
	
}

uint8_t readEEPROM(uint16_t direcc)
{
	while (EEAR &(1<<EEPE));
 232:	21 b5       	in	r18, 0x21	; 33
 234:	32 b5       	in	r19, 0x22	; 34
 236:	21 fd       	sbrc	r18, 1
 238:	fc cf       	rjmp	.-8      	; 0x232 <readEEPROM>
	EEAR = direcc;
 23a:	92 bd       	out	0x22, r25	; 34
 23c:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EEMPE);
 23e:	8f b3       	in	r24, 0x1f	; 31
 240:	84 60       	ori	r24, 0x04	; 4
 242:	8f bb       	out	0x1f, r24	; 31
	return EEDR; 
 244:	80 b5       	in	r24, 0x20	; 32
	
}
 246:	08 95       	ret

00000248 <EEPROM_mod_read>:
}

//Modo para leer la eeprom
void EEPROM_mod_read()
{
	ADCSRA &= ~(1<<ADIE);
 248:	ea e7       	ldi	r30, 0x7A	; 122
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	80 83       	st	Z, r24
	PORTD &= ~(1<<PORTD2);
 252:	8b b1       	in	r24, 0x0b	; 11
 254:	8b 7f       	andi	r24, 0xFB	; 251
 256:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PORTD3);
 258:	8b b1       	in	r24, 0x0b	; 11
 25a:	88 60       	ori	r24, 0x08	; 8
 25c:	8b b9       	out	0x0b, r24	; 11
	
	//Ejecuta la primera secuencia
	if (act == 1)
 25e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <act>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	f1 f5       	brne	.+124    	; 0x2e2 <EEPROM_mod_read+0x9a>
	{	
		addres = 0x00;
		OCR0A = readEEPROM(addres++);
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <addres+0x1>
 26e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <addres>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 27a:	87 bd       	out	0x27, r24	; 39
		OCR1A = readEEPROM(addres++);
 27c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <addres>
 280:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <addres+0x1>
 284:	9c 01       	movw	r18, r24
 286:	2f 5f       	subi	r18, 0xFF	; 255
 288:	3f 4f       	sbci	r19, 0xFF	; 255
 28a:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <addres+0x1>
 28e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <addres>
 292:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 29c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = readEEPROM(addres++);
 2a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <addres>
 2a4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <addres+0x1>
 2a8:	9c 01       	movw	r18, r24
 2aa:	2f 5f       	subi	r18, 0xFF	; 255
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
 2ae:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <addres+0x1>
 2b2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <addres>
 2b6:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2c0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		OCR2A = readEEPROM(addres++);
 2c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <addres>
 2c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <addres+0x1>
 2cc:	9c 01       	movw	r18, r24
 2ce:	2f 5f       	subi	r18, 0xFF	; 255
 2d0:	3f 4f       	sbci	r19, 0xFF	; 255
 2d2:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <addres+0x1>
 2d6:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <addres>
 2da:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 2de:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		
	}
	//Ejecuta la segunda secuencia
	if (act == 2)
 2e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <act>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	09 f0       	breq	.+2      	; 0x2ec <EEPROM_mod_read+0xa4>
 2ea:	42 c0       	rjmp	.+132    	; 0x370 <EEPROM_mod_read+0x128>
	{
		addres = 0x00;
 2ec:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <addres+0x1>
 2f0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <addres>
		add = addres + 4; 
		OCR0A = readEEPROM(add++);
 2f4:	85 e0       	ldi	r24, 0x05	; 5
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 300:	84 e0       	ldi	r24, 0x04	; 4
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 308:	87 bd       	out	0x27, r24	; 39
		OCR1A = readEEPROM(add++);
 30a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 30e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 312:	9c 01       	movw	r18, r24
 314:	2f 5f       	subi	r18, 0xFF	; 255
 316:	3f 4f       	sbci	r19, 0xFF	; 255
 318:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 31c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 320:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 32a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = readEEPROM(add++);
 32e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 332:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 336:	9c 01       	movw	r18, r24
 338:	2f 5f       	subi	r18, 0xFF	; 255
 33a:	3f 4f       	sbci	r19, 0xFF	; 255
 33c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 340:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 344:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 34e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		OCR2A = readEEPROM(add++);
 352:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 356:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 35a:	9c 01       	movw	r18, r24
 35c:	2f 5f       	subi	r18, 0xFF	; 255
 35e:	3f 4f       	sbci	r19, 0xFF	; 255
 360:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 364:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 368:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 36c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	}
	//Ejecuta la tercera secuencia 
	if (act == 3)
 370:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <act>
 374:	83 30       	cpi	r24, 0x03	; 3
 376:	09 f0       	breq	.+2      	; 0x37a <EEPROM_mod_read+0x132>
 378:	42 c0       	rjmp	.+132    	; 0x3fe <EEPROM_mod_read+0x1b6>
	{
		addres = 0x00;
 37a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <addres+0x1>
 37e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <addres>
		add = addres + 8;
		OCR0A = readEEPROM(add++);
 382:	89 e0       	ldi	r24, 0x09	; 9
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 38a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 38e:	88 e0       	ldi	r24, 0x08	; 8
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 396:	87 bd       	out	0x27, r24	; 39
		OCR1A = readEEPROM(add++);
 398:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 39c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3a0:	9c 01       	movw	r18, r24
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
 3a4:	3f 4f       	sbci	r19, 0xFF	; 255
 3a6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3aa:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ae:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = readEEPROM(add++);
 3bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3c4:	9c 01       	movw	r18, r24
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ce:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 3d2:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3dc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		OCR2A = readEEPROM(add++);
 3e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3e8:	9c 01       	movw	r18, r24
 3ea:	2f 5f       	subi	r18, 0xFF	; 255
 3ec:	3f 4f       	sbci	r19, 0xFF	; 255
 3ee:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f6:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 3fa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	}
	//Ejecuta la cuarta secuencia
	if (act == 4 )
 3fe:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <act>
 402:	84 30       	cpi	r24, 0x04	; 4
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	42 c0       	rjmp	.+132    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
	{
		addres = 0x00;
 408:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <addres+0x1>
 40c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <addres>
		add = addres + 12;
		OCR0A = readEEPROM(add++);
 410:	8d e0       	ldi	r24, 0x0D	; 13
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 418:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 41c:	8c e0       	ldi	r24, 0x0C	; 12
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 424:	87 bd       	out	0x27, r24	; 39
		OCR1A = readEEPROM(add++);
 426:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 42a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 42e:	9c 01       	movw	r18, r24
 430:	2f 5f       	subi	r18, 0xFF	; 255
 432:	3f 4f       	sbci	r19, 0xFF	; 255
 434:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 438:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 43c:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 446:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = readEEPROM(add++);
 44a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 44e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 452:	9c 01       	movw	r18, r24
 454:	2f 5f       	subi	r18, 0xFF	; 255
 456:	3f 4f       	sbci	r19, 0xFF	; 255
 458:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 45c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 460:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 46a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		OCR2A = readEEPROM(add++);
 46e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 472:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 476:	9c 01       	movw	r18, r24
 478:	2f 5f       	subi	r18, 0xFF	; 255
 47a:	3f 4f       	sbci	r19, 0xFF	; 255
 47c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 480:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 484:	0e 94 19 01 	call	0x232	; 0x232 <readEEPROM>
 488:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 48c:	08 95       	ret

0000048e <main>:

/****************************************/
// Main Function
int main(void)
{
	setup();
 48e:	0e 94 64 00 	call	0xc8	; 0xc8 <setup>
	conf_ADC();
 492:	0e 94 97 00 	call	0x12e	; 0x12e <conf_ADC>
	serialUART(); 
 496:	0e 94 48 00 	call	0x90	; 0x90 <serialUART>
	
	while (1)
	{
		switch(modo)
 49a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <modo>
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	39 f0       	breq	.+14     	; 0x4b0 <main+0x22>
 4a2:	18 f0       	brcs	.+6      	; 0x4aa <main+0x1c>
 4a4:	82 30       	cpi	r24, 0x02	; 2
 4a6:	39 f0       	breq	.+14     	; 0x4b6 <main+0x28>
 4a8:	f8 cf       	rjmp	.-16     	; 0x49a <main+0xc>
		{
			case 0: 
				ADC_mod(); 
 4aa:	0e 94 c1 00 	call	0x182	; 0x182 <ADC_mod>
				break; 
 4ae:	f5 cf       	rjmp	.-22     	; 0x49a <main+0xc>
			case 1:
				EEPROM_mod_read(); 
 4b0:	0e 94 24 01 	call	0x248	; 0x248 <EEPROM_mod_read>
				break; 
 4b4:	f2 cf       	rjmp	.-28     	; 0x49a <main+0xc>
			case 2: 
				UART_mod(); 
 4b6:	0e 94 a7 00 	call	0x14e	; 0x14e <UART_mod>
				break; 
 4ba:	ef cf       	rjmp	.-34     	; 0x49a <main+0xc>

000004bc <__vector_21>:
}

/****************************************/
// Interrupt routines
ISR(ADC_vect)
{
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	2f 93       	push	r18
 4c8:	3f 93       	push	r19
 4ca:	4f 93       	push	r20
 4cc:	5f 93       	push	r21
 4ce:	6f 93       	push	r22
 4d0:	7f 93       	push	r23
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
 4d6:	af 93       	push	r26
 4d8:	bf 93       	push	r27
 4da:	ef 93       	push	r30
 4dc:	ff 93       	push	r31
	uint8_t currentADC = ADMUX & 0x07;
 4de:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 4e2:	87 70       	andi	r24, 0x07	; 7
	uint16_t temp = ADC;
 4e4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 4e8:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	if (currentADC == 7)
 4ec:	87 30       	cpi	r24, 0x07	; 7
 4ee:	19 f5       	brne	.+70     	; 0x536 <__vector_21+0x7a>
	{
		duty = (1.96*temp)+2000.46; //servo 1 //timer 1
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__floatunsisf>
 4f8:	28 e4       	ldi	r18, 0x48	; 72
 4fa:	31 ee       	ldi	r19, 0xE1	; 225
 4fc:	4a ef       	ldi	r20, 0xFA	; 250
 4fe:	5f e3       	ldi	r21, 0x3F	; 63
 500:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 504:	28 eb       	ldi	r18, 0xB8	; 184
 506:	3e e0       	ldi	r19, 0x0E	; 14
 508:	4a ef       	ldi	r20, 0xFA	; 250
 50a:	54 e4       	ldi	r21, 0x44	; 68
 50c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__addsf3>
 510:	0e 94 cf 04 	call	0x99e	; 0x99e <__fixunssfsi>
 514:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <duty+0x1>
 518:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <duty>
		updateDutyCycle_servo2(duty);
 51c:	cb 01       	movw	r24, r22
 51e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <updateDutyCycle_servo2>
		ADMUX = 0;
 522:	ec e7       	ldi	r30, 0x7C	; 124
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0);// | (1<<ADLAR);
 528:	80 81       	ld	r24, Z
 52a:	80 64       	ori	r24, 0x40	; 64
 52c:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX1) | (1<<MUX2);
 52e:	80 81       	ld	r24, Z
 530:	86 60       	ori	r24, 0x06	; 6
 532:	80 83       	st	Z, r24
 534:	6e c0       	rjmp	.+220    	; 0x612 <__vector_21+0x156>
	}
	else if (currentADC == 6)
 536:	86 30       	cpi	r24, 0x06	; 6
 538:	19 f5       	brne	.+70     	; 0x580 <__vector_21+0xc4>
	{
		duty2 = (0.0153*temp)+15.62; //servo 2
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__floatunsisf>
 542:	2a ed       	ldi	r18, 0xDA	; 218
 544:	3c ea       	ldi	r19, 0xAC	; 172
 546:	4a e7       	ldi	r20, 0x7A	; 122
 548:	5c e3       	ldi	r21, 0x3C	; 60
 54a:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 54e:	25 e8       	ldi	r18, 0x85	; 133
 550:	3b ee       	ldi	r19, 0xEB	; 235
 552:	49 e7       	ldi	r20, 0x79	; 121
 554:	51 e4       	ldi	r21, 0x41	; 65
 556:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__addsf3>
 55a:	0e 94 cf 04 	call	0x99e	; 0x99e <__fixunssfsi>
 55e:	86 2f       	mov	r24, r22
 560:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <duty2>
 564:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <duty2+0x1>
		updateDutyCycle_servo4(duty2);
 568:	0e 94 5f 04 	call	0x8be	; 0x8be <updateDutyCycle_servo4>
		ADMUX = 0;
 56c:	ec e7       	ldi	r30, 0x7C	; 124
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0);// | (1<<ADLAR);
 572:	80 81       	ld	r24, Z
 574:	80 64       	ori	r24, 0x40	; 64
 576:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX0) | (1<<MUX2);
 578:	80 81       	ld	r24, Z
 57a:	85 60       	ori	r24, 0x05	; 5
 57c:	80 83       	st	Z, r24
 57e:	49 c0       	rjmp	.+146    	; 0x612 <__vector_21+0x156>
	}
	else if (currentADC == 5)
 580:	85 30       	cpi	r24, 0x05	; 5
 582:	19 f5       	brne	.+70     	; 0x5ca <__vector_21+0x10e>
	{
		duty0 = (0.0153*temp)+15.62; //servo 3
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__floatunsisf>
 58c:	2a ed       	ldi	r18, 0xDA	; 218
 58e:	3c ea       	ldi	r19, 0xAC	; 172
 590:	4a e7       	ldi	r20, 0x7A	; 122
 592:	5c e3       	ldi	r21, 0x3C	; 60
 594:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 598:	25 e8       	ldi	r18, 0x85	; 133
 59a:	3b ee       	ldi	r19, 0xEB	; 235
 59c:	49 e7       	ldi	r20, 0x79	; 121
 59e:	51 e4       	ldi	r21, 0x41	; 65
 5a0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__addsf3>
 5a4:	0e 94 cf 04 	call	0x99e	; 0x99e <__fixunssfsi>
 5a8:	86 2f       	mov	r24, r22
 5aa:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <duty0>
 5ae:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <duty0+0x1>
		updateDutyCycle_servo1(duty0);
 5b2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <updateDutyCycle_servo1>
		ADMUX = 0;
 5b6:	ec e7       	ldi	r30, 0x7C	; 124
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0);// | (1<<ADLAR);
 5bc:	80 81       	ld	r24, Z
 5be:	80 64       	ori	r24, 0x40	; 64
 5c0:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2);
 5c2:	80 81       	ld	r24, Z
 5c4:	84 60       	ori	r24, 0x04	; 4
 5c6:	80 83       	st	Z, r24
 5c8:	24 c0       	rjmp	.+72     	; 0x612 <__vector_21+0x156>
	}
	else if (currentADC == 4)
 5ca:	84 30       	cpi	r24, 0x04	; 4
 5cc:	11 f5       	brne	.+68     	; 0x612 <__vector_21+0x156>
	{
		duty1 = (1.96*temp)+2000.46;  //servo 4 //timer1
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__floatunsisf>
 5d6:	28 e4       	ldi	r18, 0x48	; 72
 5d8:	31 ee       	ldi	r19, 0xE1	; 225
 5da:	4a ef       	ldi	r20, 0xFA	; 250
 5dc:	5f e3       	ldi	r21, 0x3F	; 63
 5de:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 5e2:	28 eb       	ldi	r18, 0xB8	; 184
 5e4:	3e e0       	ldi	r19, 0x0E	; 14
 5e6:	4a ef       	ldi	r20, 0xFA	; 250
 5e8:	54 e4       	ldi	r21, 0x44	; 68
 5ea:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__addsf3>
 5ee:	0e 94 cf 04 	call	0x99e	; 0x99e <__fixunssfsi>
 5f2:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <duty1+0x1>
 5f6:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <duty1>
		updateDutyCycle_servo3(duty1);
 5fa:	cb 01       	movw	r24, r22
 5fc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <updateDutyCycle_servo3>
		ADMUX = 0;
 600:	ec e7       	ldi	r30, 0x7C	; 124
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0);// | (1<<ADLAR);
 606:	80 81       	ld	r24, Z
 608:	80 64       	ori	r24, 0x40	; 64
 60a:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX0) |  (1 << MUX1) | (1<<MUX2);
 60c:	80 81       	ld	r24, Z
 60e:	87 60       	ori	r24, 0x07	; 7
 610:	80 83       	st	Z, r24
	}
	ADCSRA |= (1<<ADSC);
 612:	ea e7       	ldi	r30, 0x7A	; 122
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	80 64       	ori	r24, 0x40	; 64
 61a:	80 83       	st	Z, r24
}
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	bf 91       	pop	r27
 622:	af 91       	pop	r26
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	7f 91       	pop	r23
 62a:	6f 91       	pop	r22
 62c:	5f 91       	pop	r21
 62e:	4f 91       	pop	r20
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <__vector_4>:
			}
		}
}
*/
ISR(PCINT1_vect)
{
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	8f 93       	push	r24
	//Boton para cambio de modo. 
	if (!(PINC & (1<<PINC0)))
 64a:	30 99       	sbic	0x06, 0	; 6
 64c:	0a c0       	rjmp	.+20     	; 0x662 <__vector_4+0x24>
	{
		modo++; 
 64e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <modo>
 652:	8f 5f       	subi	r24, 0xFF	; 255
 654:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <modo>
		if (modo == 3)
 658:	83 30       	cpi	r24, 0x03	; 3
 65a:	71 f4       	brne	.+28     	; 0x678 <__vector_4+0x3a>
		{
			modo = 0; 
 65c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <modo>
 660:	0b c0       	rjmp	.+22     	; 0x678 <__vector_4+0x3a>
		}
	}
	//Boton para acción de guardado 
	else if (!(PINC & (1<<PINC1)))
 662:	31 99       	sbic	0x06, 1	; 6
 664:	09 c0       	rjmp	.+18     	; 0x678 <__vector_4+0x3a>
	{
		act++; 
 666:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <act>
 66a:	8f 5f       	subi	r24, 0xFF	; 255
 66c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <act>
		if (act == 5)
 670:	85 30       	cpi	r24, 0x05	; 5
 672:	11 f4       	brne	.+4      	; 0x678 <__vector_4+0x3a>
		{
			act = 0; 
 674:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <act>
		}
	}
 678:	8f 91       	pop	r24
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

00000684 <Servo1>:
 */ 
#include "PWMTimer0.h"

void Servo1(uint8_t invertido, uint16_t presc)
{
	DDRD |=(1<< DDD6);
 684:	9a b1       	in	r25, 0x0a	; 10
 686:	90 64       	ori	r25, 0x40	; 64
 688:	9a b9       	out	0x0a, r25	; 10
	
	TCCR0A &= ~(1<<COM0A1) | (1<<COM0A0);
 68a:	94 b5       	in	r25, 0x24	; 36
 68c:	9f 77       	andi	r25, 0x7F	; 127
 68e:	94 bd       	out	0x24, r25	; 36
	if (invertido == invt)
 690:	81 30       	cpi	r24, 0x01	; 1
 692:	21 f4       	brne	.+8      	; 0x69c <Servo1+0x18>
	{
		TCCR0A |=(1<<COM0A1) | (1<<COM0A0); //modo invertido
 694:	84 b5       	in	r24, 0x24	; 36
 696:	80 6c       	ori	r24, 0xC0	; 192
 698:	84 bd       	out	0x24, r24	; 36
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <Servo1+0x1e>
	}
	else
	{
		TCCR0A |=(1<<COM0A1); //modo no invertido
 69c:	84 b5       	in	r24, 0x24	; 36
 69e:	80 68       	ori	r24, 0x80	; 128
 6a0:	84 bd       	out	0x24, r24	; 36
	}
	TCCR0A |= (1<< WGM01) | (1<< WGM00);
 6a2:	84 b5       	in	r24, 0x24	; 36
 6a4:	83 60       	ori	r24, 0x03	; 3
 6a6:	84 bd       	out	0x24, r24	; 36

	TCCR0B &= ~(1<<CS02) | (1<<CS01) | (1<<CS00);
 6a8:	85 b5       	in	r24, 0x25	; 37
 6aa:	8b 7f       	andi	r24, 0xFB	; 251
 6ac:	85 bd       	out	0x25, r24	; 37
	switch(presc){
 6ae:	60 34       	cpi	r22, 0x40	; 64
 6b0:	71 05       	cpc	r23, r1
 6b2:	c1 f0       	breq	.+48     	; 0x6e4 <Servo1+0x60>
 6b4:	38 f4       	brcc	.+14     	; 0x6c4 <Servo1+0x40>
 6b6:	61 30       	cpi	r22, 0x01	; 1
 6b8:	71 05       	cpc	r23, r1
 6ba:	61 f0       	breq	.+24     	; 0x6d4 <Servo1+0x50>
 6bc:	68 30       	cpi	r22, 0x08	; 8
 6be:	71 05       	cpc	r23, r1
 6c0:	69 f0       	breq	.+26     	; 0x6dc <Servo1+0x58>
 6c2:	08 95       	ret
 6c4:	61 15       	cp	r22, r1
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	78 07       	cpc	r23, r24
 6ca:	81 f0       	breq	.+32     	; 0x6ec <Servo1+0x68>
 6cc:	61 15       	cp	r22, r1
 6ce:	74 40       	sbci	r23, 0x04	; 4
 6d0:	89 f0       	breq	.+34     	; 0x6f4 <Servo1+0x70>
 6d2:	08 95       	ret
		case 1:
		TCCR0B |= (1<<CS00);
 6d4:	85 b5       	in	r24, 0x25	; 37
 6d6:	81 60       	ori	r24, 0x01	; 1
 6d8:	85 bd       	out	0x25, r24	; 37
		break;
 6da:	08 95       	ret
		case 8:
		TCCR0B |= (1<<CS01);
 6dc:	85 b5       	in	r24, 0x25	; 37
 6de:	82 60       	ori	r24, 0x02	; 2
 6e0:	85 bd       	out	0x25, r24	; 37
		break;
 6e2:	08 95       	ret
		case 64:
		TCCR0B |= (1<<CS01) | (1<<CS00);
 6e4:	85 b5       	in	r24, 0x25	; 37
 6e6:	83 60       	ori	r24, 0x03	; 3
 6e8:	85 bd       	out	0x25, r24	; 37
		break;
 6ea:	08 95       	ret
		case 256:
		TCCR0B |= (1<<CS02);
 6ec:	85 b5       	in	r24, 0x25	; 37
 6ee:	84 60       	ori	r24, 0x04	; 4
 6f0:	85 bd       	out	0x25, r24	; 37
		break;
 6f2:	08 95       	ret
		case 1024:
		TCCR0B |= (1<<CS02) | (1<<CS00);
 6f4:	85 b5       	in	r24, 0x25	; 37
 6f6:	85 60       	ori	r24, 0x05	; 5
 6f8:	85 bd       	out	0x25, r24	; 37
 6fa:	08 95       	ret

000006fc <updateDutyCycle_servo1>:
	//TCCR0B |= (1 << CS02); //256 de prescaler
	//TIMSK0 |= (1 << TOIE0);
}
void updateDutyCycle_servo1(uint8_t duty0)
{
	OCR0A = duty0;
 6fc:	87 bd       	out	0x27, r24	; 39
 6fe:	08 95       	ret

00000700 <Servo2>:
 */ 

#include "PWMTimer1.h"
void Servo2(uint8_t invertido, uint16_t presc) //cambiar nombres
{
	DDRB |= (1 << DDB1); // OC1A como salida
 700:	94 b1       	in	r25, 0x04	; 4
 702:	92 60       	ori	r25, 0x02	; 2
 704:	94 b9       	out	0x04, r25	; 4

	
	TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0));
 706:	e0 e8       	ldi	r30, 0x80	; 128
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	90 81       	ld	r25, Z
 70c:	9f 73       	andi	r25, 0x3F	; 63
 70e:	90 83       	st	Z, r25

	if (invertido == invt)
 710:	81 30       	cpi	r24, 0x01	; 1
 712:	21 f4       	brne	.+8      	; 0x71c <Servo2+0x1c>
	{
		TCCR1A |= (1 << COM1A1) | (1 << COM1A0); // modo invertido
 714:	80 81       	ld	r24, Z
 716:	80 6c       	ori	r24, 0xC0	; 192
 718:	80 83       	st	Z, r24
 71a:	05 c0       	rjmp	.+10     	; 0x726 <Servo2+0x26>
	}
	else
	{
		TCCR1A |= (1 << COM1A1); // modo no invertido
 71c:	e0 e8       	ldi	r30, 0x80	; 128
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	80 68       	ori	r24, 0x80	; 128
 724:	80 83       	st	Z, r24
	}

	TCCR1A |= (1 << WGM11);
 726:	e0 e8       	ldi	r30, 0x80	; 128
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	82 60       	ori	r24, 0x02	; 2
 72e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 730:	e1 e8       	ldi	r30, 0x81	; 129
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	88 61       	ori	r24, 0x18	; 24
 738:	80 83       	st	Z, r24

	ICR1 = 65000;//19999;
 73a:	88 ee       	ldi	r24, 0xE8	; 232
 73c:	9d ef       	ldi	r25, 0xFD	; 253
 73e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 742:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	switch (presc)
 746:	60 34       	cpi	r22, 0x40	; 64
 748:	71 05       	cpc	r23, r1
 74a:	e1 f0       	breq	.+56     	; 0x784 <Servo2+0x84>
 74c:	38 f4       	brcc	.+14     	; 0x75c <Servo2+0x5c>
 74e:	61 30       	cpi	r22, 0x01	; 1
 750:	71 05       	cpc	r23, r1
 752:	61 f0       	breq	.+24     	; 0x76c <Servo2+0x6c>
 754:	68 30       	cpi	r22, 0x08	; 8
 756:	71 05       	cpc	r23, r1
 758:	79 f0       	breq	.+30     	; 0x778 <Servo2+0x78>
 75a:	26 c0       	rjmp	.+76     	; 0x7a8 <Servo2+0xa8>
 75c:	61 15       	cp	r22, r1
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	78 07       	cpc	r23, r24
 762:	b1 f0       	breq	.+44     	; 0x790 <Servo2+0x90>
 764:	61 15       	cp	r22, r1
 766:	74 40       	sbci	r23, 0x04	; 4
 768:	c9 f0       	breq	.+50     	; 0x79c <Servo2+0x9c>
 76a:	1e c0       	rjmp	.+60     	; 0x7a8 <Servo2+0xa8>
	{
		case 1:
		TCCR1B |= (1 << CS10);
 76c:	e1 e8       	ldi	r30, 0x81	; 129
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	81 60       	ori	r24, 0x01	; 1
 774:	80 83       	st	Z, r24
		break;
 776:	08 95       	ret
		case 8:
		TCCR1B |= (1 << CS11);
 778:	e1 e8       	ldi	r30, 0x81	; 129
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	82 60       	ori	r24, 0x02	; 2
 780:	80 83       	st	Z, r24
		break;
 782:	08 95       	ret
		case 64:
		TCCR1B |= (1 << CS11) | (1 << CS10);
 784:	e1 e8       	ldi	r30, 0x81	; 129
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	83 60       	ori	r24, 0x03	; 3
 78c:	80 83       	st	Z, r24
		break;
 78e:	08 95       	ret
		case 256:
		TCCR1B |= (1 << CS12);
 790:	e1 e8       	ldi	r30, 0x81	; 129
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	84 60       	ori	r24, 0x04	; 4
 798:	80 83       	st	Z, r24
		break;
 79a:	08 95       	ret
		case 1024:
		TCCR1B |= (1 << CS12) | (1 << CS10);
 79c:	e1 e8       	ldi	r30, 0x81	; 129
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	85 60       	ori	r24, 0x05	; 5
 7a4:	80 83       	st	Z, r24
		break;
 7a6:	08 95       	ret
		default:
		TCCR1B |= (1 << CS11); // por defecto prescaler 8
 7a8:	e1 e8       	ldi	r30, 0x81	; 129
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	80 81       	ld	r24, Z
 7ae:	82 60       	ori	r24, 0x02	; 2
 7b0:	80 83       	st	Z, r24
 7b2:	08 95       	ret

000007b4 <updateDutyCycle_servo2>:
		break;
	}
}
void updateDutyCycle_servo2(uint16_t duty) //cambiar nombres
{
	OCR1A = duty;
 7b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 7b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 7bc:	08 95       	ret

000007be <Servo3>:
}

void Servo3(uint8_t invertido)
{
	DDRB |= (1 << DDB2); // OC1B como salida
 7be:	94 b1       	in	r25, 0x04	; 4
 7c0:	94 60       	ori	r25, 0x04	; 4
 7c2:	94 b9       	out	0x04, r25	; 4
	
	TCCR1A &= ~((1 << COM1B1) | (1 << COM1B0)); // limpiar bits previos
 7c4:	e0 e8       	ldi	r30, 0x80	; 128
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	90 81       	ld	r25, Z
 7ca:	9f 7c       	andi	r25, 0xCF	; 207
 7cc:	90 83       	st	Z, r25

	if (invertido == invt)
 7ce:	81 30       	cpi	r24, 0x01	; 1
 7d0:	21 f4       	brne	.+8      	; 0x7da <Servo3+0x1c>
	{
		TCCR1A |= (1 << COM1B1) | (1 << COM1B0); // modo invertido
 7d2:	80 81       	ld	r24, Z
 7d4:	80 63       	ori	r24, 0x30	; 48
 7d6:	80 83       	st	Z, r24
 7d8:	08 95       	ret
	}
	else
	{
		TCCR1A |= (1 << COM1B1); // modo no invertido
 7da:	e0 e8       	ldi	r30, 0x80	; 128
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	80 62       	ori	r24, 0x20	; 32
 7e2:	80 83       	st	Z, r24
 7e4:	08 95       	ret

000007e6 <updateDutyCycle_servo3>:
}

// NUEVA FUNCIÓN: actualizar OCR1B
void updateDutyCycle_servo3(uint16_t duty1)
{
	OCR1B = duty1;
 7e6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 7ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 7ee:	08 95       	ret

000007f0 <Servo4>:
 */ 

#include "PWMTimer2.h"
void Servo4(uint8_t invertido2, uint16_t presc2) //cambiar nombres
{
	DDRB |=(1<< DDB3);
 7f0:	94 b1       	in	r25, 0x04	; 4
 7f2:	98 60       	ori	r25, 0x08	; 8
 7f4:	94 b9       	out	0x04, r25	; 4

	TCCR2A &= ~((1<<COM2A1) | (1<<COM2A0));
 7f6:	e0 eb       	ldi	r30, 0xB0	; 176
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	90 81       	ld	r25, Z
 7fc:	9f 73       	andi	r25, 0x3F	; 63
 7fe:	90 83       	st	Z, r25
	if (invertido2 == invt2)
 800:	81 30       	cpi	r24, 0x01	; 1
 802:	21 f4       	brne	.+8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	{
		TCCR2A |=(1<<COM2A1) | (1<<COM2A0); //modo invertido
 804:	80 81       	ld	r24, Z
 806:	80 6c       	ori	r24, 0xC0	; 192
 808:	80 83       	st	Z, r24
 80a:	05 c0       	rjmp	.+10     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
	}
	else
	{
		TCCR2A |=(1<<COM2A1); //modo no invertido
 80c:	e0 eb       	ldi	r30, 0xB0	; 176
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	80 81       	ld	r24, Z
 812:	80 68       	ori	r24, 0x80	; 128
 814:	80 83       	st	Z, r24
	}
	//TCCR2B |= (1<< WGM22);
	TCCR2A |= (1<< WGM21) | (1<< WGM20); //Setear el modo fast
 816:	e0 eb       	ldi	r30, 0xB0	; 176
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	83 60       	ori	r24, 0x03	; 3
 81e:	80 83       	st	Z, r24

	TCCR2B &= ~(1<<CS22) | (1<<CS21) | (1<<CS20);
 820:	e1 eb       	ldi	r30, 0xB1	; 177
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	8b 7f       	andi	r24, 0xFB	; 251
 828:	80 83       	st	Z, r24
	switch(presc2){
 82a:	60 34       	cpi	r22, 0x40	; 64
 82c:	71 05       	cpc	r23, r1
 82e:	49 f1       	breq	.+82     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 830:	50 f4       	brcc	.+20     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 832:	68 30       	cpi	r22, 0x08	; 8
 834:	71 05       	cpc	r23, r1
 836:	c9 f0       	breq	.+50     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 838:	60 32       	cpi	r22, 0x20	; 32
 83a:	71 05       	cpc	r23, r1
 83c:	e1 f0       	breq	.+56     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 83e:	61 30       	cpi	r22, 0x01	; 1
 840:	71 05       	cpc	r23, r1
 842:	b9 f5       	brne	.+110    	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 844:	0c c0       	rjmp	.+24     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 846:	61 15       	cp	r22, r1
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	78 07       	cpc	r23, r24
 84c:	31 f1       	breq	.+76     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 84e:	61 15       	cp	r22, r1
 850:	84 e0       	ldi	r24, 0x04	; 4
 852:	78 07       	cpc	r23, r24
 854:	41 f1       	breq	.+80     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 856:	60 38       	cpi	r22, 0x80	; 128
 858:	71 05       	cpc	r23, r1
 85a:	59 f5       	brne	.+86     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 85c:	18 c0       	rjmp	.+48     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
		case 1:
		TCCR2B |= (1<<CS20);
 85e:	e1 eb       	ldi	r30, 0xB1	; 177
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	80 81       	ld	r24, Z
 864:	81 60       	ori	r24, 0x01	; 1
 866:	80 83       	st	Z, r24
		break;
 868:	08 95       	ret
		case 8:
		TCCR2B |= (1<<CS21);
 86a:	e1 eb       	ldi	r30, 0xB1	; 177
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
 870:	82 60       	ori	r24, 0x02	; 2
 872:	80 83       	st	Z, r24
		break;
 874:	08 95       	ret
		case 32:
		TCCR2B |= (1<<CS21) | (1<<CS20);
 876:	e1 eb       	ldi	r30, 0xB1	; 177
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
 87c:	83 60       	ori	r24, 0x03	; 3
 87e:	80 83       	st	Z, r24
		break;
 880:	08 95       	ret
		case 64:
		TCCR2B |= (1<<CS22);
 882:	e1 eb       	ldi	r30, 0xB1	; 177
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	84 60       	ori	r24, 0x04	; 4
 88a:	80 83       	st	Z, r24
		break;
 88c:	08 95       	ret
		case 128:
		TCCR2B |= (1<<CS22) | (1<<CS20);
 88e:	e1 eb       	ldi	r30, 0xB1	; 177
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	80 81       	ld	r24, Z
 894:	85 60       	ori	r24, 0x05	; 5
 896:	80 83       	st	Z, r24
		break;
 898:	08 95       	ret
		case 256:
		TCCR2B |= (1<<CS22) | (1<<CS21);
 89a:	e1 eb       	ldi	r30, 0xB1	; 177
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	86 60       	ori	r24, 0x06	; 6
 8a2:	80 83       	st	Z, r24
		break;
 8a4:	08 95       	ret
		case 1024:
		TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20);
 8a6:	e1 eb       	ldi	r30, 0xB1	; 177
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	80 81       	ld	r24, Z
 8ac:	87 60       	ori	r24, 0x07	; 7
 8ae:	80 83       	st	Z, r24
		break;
 8b0:	08 95       	ret
		default:
		TCCR2B |= (1<<CS22) | (1<<CS21); //256 de prescaler
 8b2:	e1 eb       	ldi	r30, 0xB1	; 177
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	80 81       	ld	r24, Z
 8b8:	86 60       	ori	r24, 0x06	; 6
 8ba:	80 83       	st	Z, r24
 8bc:	08 95       	ret

000008be <updateDutyCycle_servo4>:
		break;
	}
}
void updateDutyCycle_servo4(uint8_t duty2) //cambiar nombres
{
	OCR2A = duty2;
 8be:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 8c2:	08 95       	ret

000008c4 <__subsf3>:
 8c4:	50 58       	subi	r21, 0x80	; 128

000008c6 <__addsf3>:
 8c6:	bb 27       	eor	r27, r27
 8c8:	aa 27       	eor	r26, r26
 8ca:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__addsf3x>
 8ce:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__fp_round>
 8d2:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_pscA>
 8d6:	38 f0       	brcs	.+14     	; 0x8e6 <__addsf3+0x20>
 8d8:	0e 94 4b 05 	call	0xa96	; 0xa96 <__fp_pscB>
 8dc:	20 f0       	brcs	.+8      	; 0x8e6 <__addsf3+0x20>
 8de:	39 f4       	brne	.+14     	; 0x8ee <__addsf3+0x28>
 8e0:	9f 3f       	cpi	r25, 0xFF	; 255
 8e2:	19 f4       	brne	.+6      	; 0x8ea <__addsf3+0x24>
 8e4:	26 f4       	brtc	.+8      	; 0x8ee <__addsf3+0x28>
 8e6:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_nan>
 8ea:	0e f4       	brtc	.+2      	; 0x8ee <__addsf3+0x28>
 8ec:	e0 95       	com	r30
 8ee:	e7 fb       	bst	r30, 7
 8f0:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>

000008f4 <__addsf3x>:
 8f4:	e9 2f       	mov	r30, r25
 8f6:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_split3>
 8fa:	58 f3       	brcs	.-42     	; 0x8d2 <__addsf3+0xc>
 8fc:	ba 17       	cp	r27, r26
 8fe:	62 07       	cpc	r22, r18
 900:	73 07       	cpc	r23, r19
 902:	84 07       	cpc	r24, r20
 904:	95 07       	cpc	r25, r21
 906:	20 f0       	brcs	.+8      	; 0x910 <__stack+0x11>
 908:	79 f4       	brne	.+30     	; 0x928 <__stack+0x29>
 90a:	a6 f5       	brtc	.+104    	; 0x974 <__stack+0x75>
 90c:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_zero>
 910:	0e f4       	brtc	.+2      	; 0x914 <__stack+0x15>
 912:	e0 95       	com	r30
 914:	0b 2e       	mov	r0, r27
 916:	ba 2f       	mov	r27, r26
 918:	a0 2d       	mov	r26, r0
 91a:	0b 01       	movw	r0, r22
 91c:	b9 01       	movw	r22, r18
 91e:	90 01       	movw	r18, r0
 920:	0c 01       	movw	r0, r24
 922:	ca 01       	movw	r24, r20
 924:	a0 01       	movw	r20, r0
 926:	11 24       	eor	r1, r1
 928:	ff 27       	eor	r31, r31
 92a:	59 1b       	sub	r21, r25
 92c:	99 f0       	breq	.+38     	; 0x954 <__stack+0x55>
 92e:	59 3f       	cpi	r21, 0xF9	; 249
 930:	50 f4       	brcc	.+20     	; 0x946 <__stack+0x47>
 932:	50 3e       	cpi	r21, 0xE0	; 224
 934:	68 f1       	brcs	.+90     	; 0x990 <__stack+0x91>
 936:	1a 16       	cp	r1, r26
 938:	f0 40       	sbci	r31, 0x00	; 0
 93a:	a2 2f       	mov	r26, r18
 93c:	23 2f       	mov	r18, r19
 93e:	34 2f       	mov	r19, r20
 940:	44 27       	eor	r20, r20
 942:	58 5f       	subi	r21, 0xF8	; 248
 944:	f3 cf       	rjmp	.-26     	; 0x92c <__stack+0x2d>
 946:	46 95       	lsr	r20
 948:	37 95       	ror	r19
 94a:	27 95       	ror	r18
 94c:	a7 95       	ror	r26
 94e:	f0 40       	sbci	r31, 0x00	; 0
 950:	53 95       	inc	r21
 952:	c9 f7       	brne	.-14     	; 0x946 <__stack+0x47>
 954:	7e f4       	brtc	.+30     	; 0x974 <__stack+0x75>
 956:	1f 16       	cp	r1, r31
 958:	ba 0b       	sbc	r27, r26
 95a:	62 0b       	sbc	r22, r18
 95c:	73 0b       	sbc	r23, r19
 95e:	84 0b       	sbc	r24, r20
 960:	ba f0       	brmi	.+46     	; 0x990 <__stack+0x91>
 962:	91 50       	subi	r25, 0x01	; 1
 964:	a1 f0       	breq	.+40     	; 0x98e <__stack+0x8f>
 966:	ff 0f       	add	r31, r31
 968:	bb 1f       	adc	r27, r27
 96a:	66 1f       	adc	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	c2 f7       	brpl	.-16     	; 0x962 <__stack+0x63>
 972:	0e c0       	rjmp	.+28     	; 0x990 <__stack+0x91>
 974:	ba 0f       	add	r27, r26
 976:	62 1f       	adc	r22, r18
 978:	73 1f       	adc	r23, r19
 97a:	84 1f       	adc	r24, r20
 97c:	48 f4       	brcc	.+18     	; 0x990 <__stack+0x91>
 97e:	87 95       	ror	r24
 980:	77 95       	ror	r23
 982:	67 95       	ror	r22
 984:	b7 95       	ror	r27
 986:	f7 95       	ror	r31
 988:	9e 3f       	cpi	r25, 0xFE	; 254
 98a:	08 f0       	brcs	.+2      	; 0x98e <__stack+0x8f>
 98c:	b0 cf       	rjmp	.-160    	; 0x8ee <__addsf3+0x28>
 98e:	93 95       	inc	r25
 990:	88 0f       	add	r24, r24
 992:	08 f0       	brcs	.+2      	; 0x996 <__stack+0x97>
 994:	99 27       	eor	r25, r25
 996:	ee 0f       	add	r30, r30
 998:	97 95       	ror	r25
 99a:	87 95       	ror	r24
 99c:	08 95       	ret

0000099e <__fixunssfsi>:
 99e:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_splitA>
 9a2:	88 f0       	brcs	.+34     	; 0x9c6 <__fixunssfsi+0x28>
 9a4:	9f 57       	subi	r25, 0x7F	; 127
 9a6:	98 f0       	brcs	.+38     	; 0x9ce <__fixunssfsi+0x30>
 9a8:	b9 2f       	mov	r27, r25
 9aa:	99 27       	eor	r25, r25
 9ac:	b7 51       	subi	r27, 0x17	; 23
 9ae:	b0 f0       	brcs	.+44     	; 0x9dc <__fixunssfsi+0x3e>
 9b0:	e1 f0       	breq	.+56     	; 0x9ea <__fixunssfsi+0x4c>
 9b2:	66 0f       	add	r22, r22
 9b4:	77 1f       	adc	r23, r23
 9b6:	88 1f       	adc	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	1a f0       	brmi	.+6      	; 0x9c2 <__fixunssfsi+0x24>
 9bc:	ba 95       	dec	r27
 9be:	c9 f7       	brne	.-14     	; 0x9b2 <__fixunssfsi+0x14>
 9c0:	14 c0       	rjmp	.+40     	; 0x9ea <__fixunssfsi+0x4c>
 9c2:	b1 30       	cpi	r27, 0x01	; 1
 9c4:	91 f0       	breq	.+36     	; 0x9ea <__fixunssfsi+0x4c>
 9c6:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_zero>
 9ca:	b1 e0       	ldi	r27, 0x01	; 1
 9cc:	08 95       	ret
 9ce:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_zero>
 9d2:	67 2f       	mov	r22, r23
 9d4:	78 2f       	mov	r23, r24
 9d6:	88 27       	eor	r24, r24
 9d8:	b8 5f       	subi	r27, 0xF8	; 248
 9da:	39 f0       	breq	.+14     	; 0x9ea <__fixunssfsi+0x4c>
 9dc:	b9 3f       	cpi	r27, 0xF9	; 249
 9de:	cc f3       	brlt	.-14     	; 0x9d2 <__fixunssfsi+0x34>
 9e0:	86 95       	lsr	r24
 9e2:	77 95       	ror	r23
 9e4:	67 95       	ror	r22
 9e6:	b3 95       	inc	r27
 9e8:	d9 f7       	brne	.-10     	; 0x9e0 <__fixunssfsi+0x42>
 9ea:	3e f4       	brtc	.+14     	; 0x9fa <__fixunssfsi+0x5c>
 9ec:	90 95       	com	r25
 9ee:	80 95       	com	r24
 9f0:	70 95       	com	r23
 9f2:	61 95       	neg	r22
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	08 95       	ret

000009fc <__floatunsisf>:
 9fc:	e8 94       	clt
 9fe:	09 c0       	rjmp	.+18     	; 0xa12 <__floatsisf+0x12>

00000a00 <__floatsisf>:
 a00:	97 fb       	bst	r25, 7
 a02:	3e f4       	brtc	.+14     	; 0xa12 <__floatsisf+0x12>
 a04:	90 95       	com	r25
 a06:	80 95       	com	r24
 a08:	70 95       	com	r23
 a0a:	61 95       	neg	r22
 a0c:	7f 4f       	sbci	r23, 0xFF	; 255
 a0e:	8f 4f       	sbci	r24, 0xFF	; 255
 a10:	9f 4f       	sbci	r25, 0xFF	; 255
 a12:	99 23       	and	r25, r25
 a14:	a9 f0       	breq	.+42     	; 0xa40 <__floatsisf+0x40>
 a16:	f9 2f       	mov	r31, r25
 a18:	96 e9       	ldi	r25, 0x96	; 150
 a1a:	bb 27       	eor	r27, r27
 a1c:	93 95       	inc	r25
 a1e:	f6 95       	lsr	r31
 a20:	87 95       	ror	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b7 95       	ror	r27
 a28:	f1 11       	cpse	r31, r1
 a2a:	f8 cf       	rjmp	.-16     	; 0xa1c <__floatsisf+0x1c>
 a2c:	fa f4       	brpl	.+62     	; 0xa6c <__floatsisf+0x6c>
 a2e:	bb 0f       	add	r27, r27
 a30:	11 f4       	brne	.+4      	; 0xa36 <__floatsisf+0x36>
 a32:	60 ff       	sbrs	r22, 0
 a34:	1b c0       	rjmp	.+54     	; 0xa6c <__floatsisf+0x6c>
 a36:	6f 5f       	subi	r22, 0xFF	; 255
 a38:	7f 4f       	sbci	r23, 0xFF	; 255
 a3a:	8f 4f       	sbci	r24, 0xFF	; 255
 a3c:	9f 4f       	sbci	r25, 0xFF	; 255
 a3e:	16 c0       	rjmp	.+44     	; 0xa6c <__floatsisf+0x6c>
 a40:	88 23       	and	r24, r24
 a42:	11 f0       	breq	.+4      	; 0xa48 <__floatsisf+0x48>
 a44:	96 e9       	ldi	r25, 0x96	; 150
 a46:	11 c0       	rjmp	.+34     	; 0xa6a <__floatsisf+0x6a>
 a48:	77 23       	and	r23, r23
 a4a:	21 f0       	breq	.+8      	; 0xa54 <__floatsisf+0x54>
 a4c:	9e e8       	ldi	r25, 0x8E	; 142
 a4e:	87 2f       	mov	r24, r23
 a50:	76 2f       	mov	r23, r22
 a52:	05 c0       	rjmp	.+10     	; 0xa5e <__floatsisf+0x5e>
 a54:	66 23       	and	r22, r22
 a56:	71 f0       	breq	.+28     	; 0xa74 <__floatsisf+0x74>
 a58:	96 e8       	ldi	r25, 0x86	; 134
 a5a:	86 2f       	mov	r24, r22
 a5c:	70 e0       	ldi	r23, 0x00	; 0
 a5e:	60 e0       	ldi	r22, 0x00	; 0
 a60:	2a f0       	brmi	.+10     	; 0xa6c <__floatsisf+0x6c>
 a62:	9a 95       	dec	r25
 a64:	66 0f       	add	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	88 1f       	adc	r24, r24
 a6a:	da f7       	brpl	.-10     	; 0xa62 <__floatsisf+0x62>
 a6c:	88 0f       	add	r24, r24
 a6e:	96 95       	lsr	r25
 a70:	87 95       	ror	r24
 a72:	97 f9       	bld	r25, 7
 a74:	08 95       	ret

00000a76 <__fp_inf>:
 a76:	97 f9       	bld	r25, 7
 a78:	9f 67       	ori	r25, 0x7F	; 127
 a7a:	80 e8       	ldi	r24, 0x80	; 128
 a7c:	70 e0       	ldi	r23, 0x00	; 0
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	08 95       	ret

00000a82 <__fp_nan>:
 a82:	9f ef       	ldi	r25, 0xFF	; 255
 a84:	80 ec       	ldi	r24, 0xC0	; 192
 a86:	08 95       	ret

00000a88 <__fp_pscA>:
 a88:	00 24       	eor	r0, r0
 a8a:	0a 94       	dec	r0
 a8c:	16 16       	cp	r1, r22
 a8e:	17 06       	cpc	r1, r23
 a90:	18 06       	cpc	r1, r24
 a92:	09 06       	cpc	r0, r25
 a94:	08 95       	ret

00000a96 <__fp_pscB>:
 a96:	00 24       	eor	r0, r0
 a98:	0a 94       	dec	r0
 a9a:	12 16       	cp	r1, r18
 a9c:	13 06       	cpc	r1, r19
 a9e:	14 06       	cpc	r1, r20
 aa0:	05 06       	cpc	r0, r21
 aa2:	08 95       	ret

00000aa4 <__fp_round>:
 aa4:	09 2e       	mov	r0, r25
 aa6:	03 94       	inc	r0
 aa8:	00 0c       	add	r0, r0
 aaa:	11 f4       	brne	.+4      	; 0xab0 <__fp_round+0xc>
 aac:	88 23       	and	r24, r24
 aae:	52 f0       	brmi	.+20     	; 0xac4 <__fp_round+0x20>
 ab0:	bb 0f       	add	r27, r27
 ab2:	40 f4       	brcc	.+16     	; 0xac4 <__fp_round+0x20>
 ab4:	bf 2b       	or	r27, r31
 ab6:	11 f4       	brne	.+4      	; 0xabc <__fp_round+0x18>
 ab8:	60 ff       	sbrs	r22, 0
 aba:	04 c0       	rjmp	.+8      	; 0xac4 <__fp_round+0x20>
 abc:	6f 5f       	subi	r22, 0xFF	; 255
 abe:	7f 4f       	sbci	r23, 0xFF	; 255
 ac0:	8f 4f       	sbci	r24, 0xFF	; 255
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	08 95       	ret

00000ac6 <__fp_split3>:
 ac6:	57 fd       	sbrc	r21, 7
 ac8:	90 58       	subi	r25, 0x80	; 128
 aca:	44 0f       	add	r20, r20
 acc:	55 1f       	adc	r21, r21
 ace:	59 f0       	breq	.+22     	; 0xae6 <__fp_splitA+0x10>
 ad0:	5f 3f       	cpi	r21, 0xFF	; 255
 ad2:	71 f0       	breq	.+28     	; 0xaf0 <__fp_splitA+0x1a>
 ad4:	47 95       	ror	r20

00000ad6 <__fp_splitA>:
 ad6:	88 0f       	add	r24, r24
 ad8:	97 fb       	bst	r25, 7
 ada:	99 1f       	adc	r25, r25
 adc:	61 f0       	breq	.+24     	; 0xaf6 <__fp_splitA+0x20>
 ade:	9f 3f       	cpi	r25, 0xFF	; 255
 ae0:	79 f0       	breq	.+30     	; 0xb00 <__fp_splitA+0x2a>
 ae2:	87 95       	ror	r24
 ae4:	08 95       	ret
 ae6:	12 16       	cp	r1, r18
 ae8:	13 06       	cpc	r1, r19
 aea:	14 06       	cpc	r1, r20
 aec:	55 1f       	adc	r21, r21
 aee:	f2 cf       	rjmp	.-28     	; 0xad4 <__fp_split3+0xe>
 af0:	46 95       	lsr	r20
 af2:	f1 df       	rcall	.-30     	; 0xad6 <__fp_splitA>
 af4:	08 c0       	rjmp	.+16     	; 0xb06 <__fp_splitA+0x30>
 af6:	16 16       	cp	r1, r22
 af8:	17 06       	cpc	r1, r23
 afa:	18 06       	cpc	r1, r24
 afc:	99 1f       	adc	r25, r25
 afe:	f1 cf       	rjmp	.-30     	; 0xae2 <__fp_splitA+0xc>
 b00:	86 95       	lsr	r24
 b02:	71 05       	cpc	r23, r1
 b04:	61 05       	cpc	r22, r1
 b06:	08 94       	sec
 b08:	08 95       	ret

00000b0a <__fp_zero>:
 b0a:	e8 94       	clt

00000b0c <__fp_szero>:
 b0c:	bb 27       	eor	r27, r27
 b0e:	66 27       	eor	r22, r22
 b10:	77 27       	eor	r23, r23
 b12:	cb 01       	movw	r24, r22
 b14:	97 f9       	bld	r25, 7
 b16:	08 95       	ret

00000b18 <__mulsf3>:
 b18:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__mulsf3x>
 b1c:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__fp_round>
 b20:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_pscA>
 b24:	38 f0       	brcs	.+14     	; 0xb34 <__mulsf3+0x1c>
 b26:	0e 94 4b 05 	call	0xa96	; 0xa96 <__fp_pscB>
 b2a:	20 f0       	brcs	.+8      	; 0xb34 <__mulsf3+0x1c>
 b2c:	95 23       	and	r25, r21
 b2e:	11 f0       	breq	.+4      	; 0xb34 <__mulsf3+0x1c>
 b30:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>
 b34:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_nan>
 b38:	11 24       	eor	r1, r1
 b3a:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_szero>

00000b3e <__mulsf3x>:
 b3e:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_split3>
 b42:	70 f3       	brcs	.-36     	; 0xb20 <__mulsf3+0x8>

00000b44 <__mulsf3_pse>:
 b44:	95 9f       	mul	r25, r21
 b46:	c1 f3       	breq	.-16     	; 0xb38 <__mulsf3+0x20>
 b48:	95 0f       	add	r25, r21
 b4a:	50 e0       	ldi	r21, 0x00	; 0
 b4c:	55 1f       	adc	r21, r21
 b4e:	62 9f       	mul	r22, r18
 b50:	f0 01       	movw	r30, r0
 b52:	72 9f       	mul	r23, r18
 b54:	bb 27       	eor	r27, r27
 b56:	f0 0d       	add	r31, r0
 b58:	b1 1d       	adc	r27, r1
 b5a:	63 9f       	mul	r22, r19
 b5c:	aa 27       	eor	r26, r26
 b5e:	f0 0d       	add	r31, r0
 b60:	b1 1d       	adc	r27, r1
 b62:	aa 1f       	adc	r26, r26
 b64:	64 9f       	mul	r22, r20
 b66:	66 27       	eor	r22, r22
 b68:	b0 0d       	add	r27, r0
 b6a:	a1 1d       	adc	r26, r1
 b6c:	66 1f       	adc	r22, r22
 b6e:	82 9f       	mul	r24, r18
 b70:	22 27       	eor	r18, r18
 b72:	b0 0d       	add	r27, r0
 b74:	a1 1d       	adc	r26, r1
 b76:	62 1f       	adc	r22, r18
 b78:	73 9f       	mul	r23, r19
 b7a:	b0 0d       	add	r27, r0
 b7c:	a1 1d       	adc	r26, r1
 b7e:	62 1f       	adc	r22, r18
 b80:	83 9f       	mul	r24, r19
 b82:	a0 0d       	add	r26, r0
 b84:	61 1d       	adc	r22, r1
 b86:	22 1f       	adc	r18, r18
 b88:	74 9f       	mul	r23, r20
 b8a:	33 27       	eor	r19, r19
 b8c:	a0 0d       	add	r26, r0
 b8e:	61 1d       	adc	r22, r1
 b90:	23 1f       	adc	r18, r19
 b92:	84 9f       	mul	r24, r20
 b94:	60 0d       	add	r22, r0
 b96:	21 1d       	adc	r18, r1
 b98:	82 2f       	mov	r24, r18
 b9a:	76 2f       	mov	r23, r22
 b9c:	6a 2f       	mov	r22, r26
 b9e:	11 24       	eor	r1, r1
 ba0:	9f 57       	subi	r25, 0x7F	; 127
 ba2:	50 40       	sbci	r21, 0x00	; 0
 ba4:	9a f0       	brmi	.+38     	; 0xbcc <__mulsf3_pse+0x88>
 ba6:	f1 f0       	breq	.+60     	; 0xbe4 <__mulsf3_pse+0xa0>
 ba8:	88 23       	and	r24, r24
 baa:	4a f0       	brmi	.+18     	; 0xbbe <__mulsf3_pse+0x7a>
 bac:	ee 0f       	add	r30, r30
 bae:	ff 1f       	adc	r31, r31
 bb0:	bb 1f       	adc	r27, r27
 bb2:	66 1f       	adc	r22, r22
 bb4:	77 1f       	adc	r23, r23
 bb6:	88 1f       	adc	r24, r24
 bb8:	91 50       	subi	r25, 0x01	; 1
 bba:	50 40       	sbci	r21, 0x00	; 0
 bbc:	a9 f7       	brne	.-22     	; 0xba8 <__mulsf3_pse+0x64>
 bbe:	9e 3f       	cpi	r25, 0xFE	; 254
 bc0:	51 05       	cpc	r21, r1
 bc2:	80 f0       	brcs	.+32     	; 0xbe4 <__mulsf3_pse+0xa0>
 bc4:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>
 bc8:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_szero>
 bcc:	5f 3f       	cpi	r21, 0xFF	; 255
 bce:	e4 f3       	brlt	.-8      	; 0xbc8 <__mulsf3_pse+0x84>
 bd0:	98 3e       	cpi	r25, 0xE8	; 232
 bd2:	d4 f3       	brlt	.-12     	; 0xbc8 <__mulsf3_pse+0x84>
 bd4:	86 95       	lsr	r24
 bd6:	77 95       	ror	r23
 bd8:	67 95       	ror	r22
 bda:	b7 95       	ror	r27
 bdc:	f7 95       	ror	r31
 bde:	e7 95       	ror	r30
 be0:	9f 5f       	subi	r25, 0xFF	; 255
 be2:	c1 f7       	brne	.-16     	; 0xbd4 <__mulsf3_pse+0x90>
 be4:	fe 2b       	or	r31, r30
 be6:	88 0f       	add	r24, r24
 be8:	91 1d       	adc	r25, r1
 bea:	96 95       	lsr	r25
 bec:	87 95       	ror	r24
 bee:	97 f9       	bld	r25, 7
 bf0:	08 95       	ret

00000bf2 <_exit>:
 bf2:	f8 94       	cli

00000bf4 <__stop_program>:
 bf4:	ff cf       	rjmp	.-2      	; 0xbf4 <__stop_program>
